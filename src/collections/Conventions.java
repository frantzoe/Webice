//
// Generated by Lincoln on: 2018.05.15 at 12:41:17 AM CEST
//

package collections;

import models.Convention;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Conventions complex type.
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {"convention"})
@XmlRootElement(name = "conventions")
public class Conventions {

    protected List<Convention> convention;

    /**
     * Gets the value of the convention property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the convention property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConvention().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Convention }
     * 
     * 
     */
    public List<Convention> getConvention() {
        if (convention == null) {
            convention = new ArrayList<>();
        }
        return this.convention;
    }

    public Convention getConvention(String label) {
        for (Convention c : this.convention) {
            if (c.getLabel().equals(label)) {
                return c;
            }
        }
        return null;
    }

    public void addConvention(Convention convention) {
        this.convention.add(convention);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Conventions)) return false;
        Conventions that = (Conventions) o;
        return Objects.equals(convention, that.convention);
    }

    @Override
    public int hashCode() {

        return Objects.hash(convention);
    }

    @Override
    public String toString() {
        return "Conventions{" +
                "convention=" + convention +
                '}';
    }
}
